# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
dir = File.dirname(File.expand_path(__FILE__))
require "#{dir}/to_bool.rb"

#
# array_true.rb
#

# ---- original file header ----
#
# @summary
#   
#    Returns true if value in array exists and is truthy
#
#
Puppet::Functions.create_function(:'array_true') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    unless args.length == 2
      raise Puppet::ParseError, ("array_true(): wrong number of arguments (#{args.length}; must be 2)")
    end

    container = args[0]

    if (!container.is_a?(Hash)) && (!container.is_a?(Array))
      return false
    end

    keys = (args[1].is_a?(Array)) ? args[1] : [args[1]]

    # If multiple values passed to check,
    # all must pass truthyness check to return true
    keys.each do |key|
      if !container.has_key?(key)
        return false
      end

      if (container[key].is_a?(Hash)) || (container[key].is_a?(Array))
        if !(container[key].count > 0)
          return false
        end

        next
      end

      if !(container[key].to_bool)
        return false
      end
    end

    return true

  
  end
end
